const bcrypt = require('bcryptjs'); // library for hashing the password
const jwt = require('jsonwebtoken'); //jwt for authentication
const { combineResolvers } = require('graphql-resolvers');

const User = require('../models/user');
const Car = require('../models/car');
const { isAuthenticated } =  require('./middleware');


module.exports =  {
    Query :{
        user: combineResolvers(isAuthenticated, async(_,__, { email }) => {
        try{
            // console.log("#####",email);
           const user = await User.findOne({email});
           if(!user){
            throw new Error('User not found!');
           }
           return user;
        }catch(error){
            console.log(error);
            throw error;
        }
        })
    },
    Mutation:{
        signup: async(_, { input }) => {
            try{
                const user = await User.findOne({ email: input.email });
                if(user){
                    throw new Error('Email already in use');
                }
                //  const hashedPassword = await bcrypt.hash(input.password,12); // hashed password bcrypt autogenerated
                const hashedPassword = await input.password; // password set by user--> anything as per user
                const newUser = new User({...input , password : hashedPassword});
                const result = await newUser.save();
                return result;
            }catch(error){
                console.log(error);
                throw error;
            }
        },
        login: async(_, { input }) =>{
            try{
                const user = await User.findOne({email:input.email});
                if(!user){
                    throw new Error('User not found');
                }
                // const isPasswordValid = await bcrypt.compare(input.password,user.password); // if bycrpyt password generation is sued uncomment it and comment next line
                const isPasswordValid = input.password == user.password;
                if(!isPasswordValid){
                    throw new Error('Incorrect Password');
                }
                const secret = 'mysecretkey';
                const token = jwt.sign({ email : user.email },secret, { expiresIn : '1d' }); //1d = 1day can be in seconds or hours or so -- refer -- npmjs.com/package/jsonwebtoken
                return { token };
            }catch(error){
                console.log(error);
                throw error;
            }
        }

    },
    User:{
        myCar:async({ reg_num }) => {
            try{
                const myCar = await Car.find({user:reg_num});
                return myCar;

            }catch(error){
                console.log(error);
                throw error;
            }
        }

    }}
